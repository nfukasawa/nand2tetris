// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buf;
    field int cur, cap;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let buf = Memory.alloc(maxLength);
        }
        let cur = 0;
        let cap = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (cap > 0) {
            do buf.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return cur;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < cap) {
            return buf[j];
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < cap) {
            let buf[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(cur < cap) {
            let buf[cur] = c;
            let cur = cur + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(cur > 0) {
            let cur = cur - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, sign;
        var char c;

        if (cur = 0) {
            return 0;
        }

        if (buf[0] = 45) { // '-'
            let i = 1;
            let sign = -1;
        } else {
            let i = 0;
            let sign = 1;
        }

        let val = 0;
        while(i < cur) {
            let c = buf[i];
            if ((c < 48) | (c > 57)) { // c < '0' | c > '9'
                return sign * val;
            }
            let val = (val * 10) + (c - 48);
            let i = i + 1;
        }
        return sign * val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int d, q;

        let cur = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45); // '-'
        }

        let d = 10;
        while((val / d) > 10) {
            let d = d * 10;
        }

        while(d > 0) {
            let q = val / d;
            let val = val - (q * d);
            let d = d / 10;
            do appendChar(q + 48);  // q + '0'
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
