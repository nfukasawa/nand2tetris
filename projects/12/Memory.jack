// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        var Array seg;

        let memory = 0;

        let freeList = 2048;
        let freeList[0] = 16384 - freeList;
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array seg, selected, prev, selectedPrev, block;
        var int diff, minDiff;

        let seg = freeList;
        let selected = seg;
        let prev = null;
        let selectedPrev = null;
        let minDiff = 16384;

        while(~(seg[1] = null)) {
            let diff = seg[0] - size - 2;
            if ((diff > -1) & (diff < minDiff)) {
                let selected = seg;
                let selectedPrev = prev;
                let minDiff = diff;
            }
            let prev = seg;
            let seg = seg[1];
        }

        if (selected = null) {
            return -1;
        }

        if (selected[0] > ((size + 1) * 2)) {
            let block = selected + selected[0] - size;
            let block[-1] = size + 1;
            let selected[0] = selected[0] - size - 1;
            return block;
        }

        if (selectedPrev = null) {
            let freeList = selected[1];
        } else {
            let selectedPrev[1] = selected[1];
        }
        return selected + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // TODO: collect consecutive free segments
        var Array seg;
        let seg = o - 1;
        let seg[1] = freeList;
        let freeList = seg;
        return;
    }
}
